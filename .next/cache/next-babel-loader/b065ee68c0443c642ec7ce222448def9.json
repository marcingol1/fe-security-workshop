{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/Users/marcingol/Desktop/hello-world (1)/utils/auth.js\";\nimport React from \"react\";\nimport { Component } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\n\nfunction login({\n  token\n}) {\n  cookie.set('token', token, {\n    expires: 1\n  });\n  Router.push('/profile');\n}\n\nfunction logout() {\n  cookie.remove('token'); // to support logging out from all windows\n\n  window.localStorage.setItem('logout', _Date$now());\n  Router.push('/login');\n} // Gets the display name of a JSX component for dev tools\n\n\nconst getDisplayName = Component => Component.displayName || Component.name || 'Component';\n\nfunction withAuthSync(WrappedComponent) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    static async getInitialProps(ctx) {\n      const token = auth(ctx);\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n      return _objectSpread({}, componentProps, {\n        token\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.syncLogout = this.syncLogout.bind(this);\n    }\n\n    componentDidMount() {\n      window.addEventListener('storage', this.syncLogout);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('storage', this.syncLogout);\n      window.localStorage.removeItem('logout');\n    }\n\n    syncLogout(event) {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/login');\n      }\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, _extends({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n\n  }, _defineProperty(_class, \"displayName\", `withAuthSync(${getDisplayName(WrappedComponent)})`), _temp;\n}\n\nfunction auth(ctx) {\n  const {\n    token\n  } = nextCookie(ctx);\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: '/login'\n    });\n    ctx.res.end();\n  } // We already checked for server. This should only happen on client.\n\n\n  if (!token) {\n    Router.push('/login');\n  }\n\n  return token;\n}\n\nexport { login, logout, withAuthSync, auth };","map":{"version":3,"sources":["/Users/marcingol/Desktop/hello-world (1)/utils/auth.js"],"names":["Component","Router","nextCookie","cookie","login","token","set","expires","push","logout","remove","window","localStorage","setItem","getDisplayName","displayName","name","withAuthSync","WrappedComponent","getInitialProps","ctx","auth","componentProps","constructor","props","syncLogout","bind","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","removeItem","event","key","console","log","render","req","res","writeHead","Location","end"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\n\nfunction login({ token }) {\n  cookie.set('token', token, { expires: 1 });\n  Router.push('/profile');\n}\n\nfunction logout() {\n  cookie.remove('token');\n  // to support logging out from all windows\n  window.localStorage.setItem('logout', Date.now());\n  Router.push('/login');\n}\n\n// Gets the display name of a JSX component for dev tools\nconst getDisplayName = Component =>\n  Component.displayName || Component.name || 'Component';\n\nfunction withAuthSync(WrappedComponent) {\n  return class extends Component {\n    static displayName = `withAuthSync(${getDisplayName(WrappedComponent)})`;\n\n    static async getInitialProps(ctx) {\n      const token = auth(ctx);\n\n      const componentProps =\n        WrappedComponent.getInitialProps &&\n        (await WrappedComponent.getInitialProps(ctx));\n\n      return { ...componentProps, token };\n    }\n\n    constructor(props) {\n      super(props);\n\n      this.syncLogout = this.syncLogout.bind(this);\n    }\n\n    componentDidMount() {\n      window.addEventListener('storage', this.syncLogout);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('storage', this.syncLogout);\n      window.localStorage.removeItem('logout');\n    }\n\n    syncLogout(event) {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/login');\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n}\n\nfunction auth(ctx) {\n  const { token } = nextCookie(ctx);\n\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, { Location: '/login' });\n    ctx.res.end();\n  }\n\n  // We already checked for server. This should only happen on client.\n  if (!token) {\n    Router.push('/login');\n  }\n\n  return token;\n}\n\nexport { login, logout, withAuthSync, auth };\n"]},"metadata":{},"sourceType":"module"}